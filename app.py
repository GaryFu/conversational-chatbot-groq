import streamlit as st
import os
import pyperclip
import yaml
from groq import Groq
import random

from langchain.chains import ConversationChain, LLMChain
from langchain_core.prompts import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate,
    MessagesPlaceholder,
)
from langchain_core.messages import SystemMessage
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate

def load_config(config_path='config.yaml'):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def main():
    """
    This function is the main entry point of the application. It sets up the Groq client, the Streamlit interface, and handles the chat interaction.
    """
    
    # Get Groq API key
    groq_api_key = os.environ['GROQ_API_KEY']

    # The title and greeting message of the Streamlit application
    st.subheader("欢迎使用飞一般的Groq AI Bot!")
    # st.write("Hello! I'm your friendly Groq chatbot. I can help answer your questions, provide information, or just chat. I'm also super fast! Let's start our conversation!")

    # Load configuration from YAML file
    config = load_config()
    system_prompts = config['system_prompts']

    # Add customization options to the sidebar
    st.sidebar.title('选择系统提示语和大模型')
    
    prompt_descriptions = [prompt['description'] for prompt in system_prompts]
    selected_prompt_description = st.sidebar.selectbox('选择/设置系统提示语', prompt_descriptions)
    selected_prompt = next(prompt['prompt'] for prompt in system_prompts if prompt['description'] == selected_prompt_description)

    if selected_prompt == "自定义":
        system_prompt = st.sidebar.text_input("请设置系统提示语:")
    else:
        system_prompt = selected_prompt

    st.write(system_prompt)
   
    model = st.sidebar.selectbox(
        '选择大模型',
        ['llama3-70b-8192', 'llama3-8b-8192', 'mixtral-8x7b-32768', 'gemma-7b-it', 'gemma2-9b-it']
    )
    conversational_memory_length = st.sidebar.slider('Conversational memory length:', 1, 10, value=5)

    memory = ConversationBufferWindowMemory(k=conversational_memory_length, memory_key="chat_history", return_messages=True)

    # Form to input user question and send
    # with st.form(key='user_input_form', clear_on_submit=True):
    user_question = st.text_input("提问:")
        # submit_button = st.form_submit_button(label='发送')

    # session state variable
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    else:
        for message in st.session_state.chat_history:
            memory.save_context(
                {'input': message['human']},
                {'output': message['AI']}
            )

    # Initialize Groq Langchain chat object and conversation
    groq_chat = ChatGroq(
        groq_api_key=groq_api_key, 
        model_name=model
    )

    # If the user has submitted a question,
    if user_question:
        # Construct a chat prompt template using various components
        prompt = ChatPromptTemplate.from_messages(
            [
                SystemMessage(
                    content=system_prompt
                ),  # This is the persistent system prompt that is always included at the start of the chat.

                MessagesPlaceholder(
                    variable_name="chat_history"
                ),  # This placeholder will be replaced by the actual chat history during the conversation. It helps in maintaining context.

                HumanMessagePromptTemplate.from_template(
                    "{human_input}"
                ),  # This template is where the user's current input will be injected into the prompt.
            ]
        )

        # Create a conversation chain using the LangChain LLM (Language Learning Model)
        conversation = LLMChain(
            llm=groq_chat,  # The Groq LangChain chat object initialized earlier.
            prompt=prompt,  # The constructed prompt template.
            verbose=True,   # Enables verbose output, which can be useful for debugging.
            memory=memory,  # The conversational memory object that stores and manages the conversation history.
        )
        
        # The chatbot's answer is generated by sending the full prompt to the Groq API.
        response = conversation.predict(human_input=user_question)
        message = {'human': user_question, 'AI': response}
        st.session_state.chat_history.append(message)
        st.write("Chatbot:", response)
        
        # # Add a copy button
        # if st.button('复制到剪贴板'):
        #     pyperclip.copy(response)
        #     st.success('复制成功！')

if __name__ == "__main__":
    main()
